import React from "next/router";
import Head from "next/head";
import Image from "next/image";
import Header from "~/components/Header";
import Footer from "~/components/Footer";
import type { IProductDetail } from "~/lib/validation/productDetail";
import { getSku, getProductData } from "~/lib/product";
import Select from "react-tailwindcss-select";
import { useEffect, useState } from "react";
import type { SelectValue } from "react-tailwindcss-select/dist/components/type";
import { useSession } from "next-auth/react";

//ISR this page for better SEO and performance

const ProductPage = ({
  productData,
}: {
  productData: IProductDetail["detail"]["data"]["catalog"]["product"];
}) => {
  const [formSelection, setSelection] = useState<{
    color: string | null;
    size: SelectValue | null;
    sizeValue: string | null;
  }>({ color: null, size: null , sizeValue: null});

  // this will set the state when there is only one color
  useEffect(() => {
  productData.options.map((option) => {
    if (option.title === "Color") {
      if (option.selections.length === 1){ // if there is only one color, set it to state
        setSelection({
          ...formSelection, // destructuring the old state
          color: option?.selections[0]?.value || null, // set color to new state
        })
    }}
  })}, [productData.options]) // dont need formSelection because we need to set it only once when the page is loaded and not when the state is changed

  
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen w-screen flex-col bg-base-200">
        <div className="fixed top-0 z-50 flex w-full justify-start px-4 py-3">
          <Header />
        </div>
        <div className="relative px-4 mt-24 flex flex-col justify-center">
          <div className="flex flex-col overflow-hidden rounded-xl bg-white shadow-2xl">
            <div className="hero bg-base-100">
              <div className="hero-content w-full flex-col p-0 md:flex-row md:px-5 md:py-5">
                <div className="relative left-0 h-[30rem] w-full overflow-hidden md:w-[30rem] md:rounded-3xl md:align-middle md:drop-shadow-xl">
                  {productData ? (
                    <Image
                      alt={productData?.media[0]?.altText || "banner"}
                      src={productData?.media[0]?.fullUrl || "/Banner1.png"}
                      fill
                      priority={true} //this is a largest contentful paint so we will make it priority
                      className="object-cover"
                    />
                  ) : (
                    <progress className="progress w-56 align-middle"></progress>
                  )}
                </div>
                <div className="px-10 py-10 md:w-1/2 md:px-10">
                  <h1 className="pb-6 text-5xl font-bold">
                    {productData?.name}
                  </h1>
                  <p className="pb-6">{productData?.description}</p>
                  <div className="flex flex-row gap-5 pb-6">
                    {productData.options.map((option) => {
                      if (option.title === "Color") {
                        if (option.selections.length > 1) {
                          // if there is only 1 color option then dont show the color option
                          return (
                            <div key={option.title}>
                              <p className="mb-1">Color</p>
                              {option.selections.map((selection) => {
                                return (
                                  <input
                                    key={selection.key}
                                    type="radio"
                                    name="radio-7"
                                    style={{
                                      backgroundColor: selection.value, // shouldnt do this but tailwind cant change class after build time
                                      // borderColor: selection.value,
                                    }}
                                    value={selection.value}
                                    onClick={(e) => {
                                      setSelection({
                                        ...formSelection, // destructuring the old state
                                        color: (e.target as HTMLInputElement)
                                          .value, // set new color to state
                                      });
                                    }}
                                    className={`radio mr-2`}
                                  ></input>
                                );
                              })}
                            </div>
                          );
                        }
                      } else {
                        return (
                          <div key={option.title} className="mb-2 w-40">
                            <p className="mb-1">Size</p>
                            <Select
                              primaryColor={"blue"}
                              value={formSelection?.size}
                              onChange={(value: SelectValue) => {
                                const size = value as { value: string; label: string}
                                setSelection({
                                  ...formSelection, // destructuring the old state
                                  size: value, // set color to new state
                                  sizeValue : size.value
                                });
                              }}
                              options={option.selections.map((selection) => {
                                return {
                                  value: selection.value,
                                  label: selection.description,
                                };
                              })}
                            />
                          </div>
                        );
                      }
                    })}
                  </div>
                  <button
                    className="btn-primary btn"
                    onClick={() => console.log(formSelection)}
                  >
                    ADD TO CART
                  </button>
                </div>
              </div>
            </div>
            <div className="mx-10 my-14 flex flex-col gap-10 md:m-20 md:flex-row">
              {productData?.additionalInfo?.map((info) => {
                return (
                  <div className="w-full" key={info.id}>
                    <div className="flex w-full flex-col">
                      <h1 className="mb-3 text-2xl font-bold">{info.title}</h1>
                      {info.description.slice(3, -5)} {/* remove the <p> tag */}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          <div className="flex w-full flex-row items-center justify-center rounded-xl bg-base-100 drop-shadow-lg">
            {/* <h1 className="my-10 text-4xl font-bold ">New Arrivals</h1> */}
          </div>
        </div>
        <Footer />
      </main>
    </>
  );
};

export async function getStaticPaths() {
  const paths = await getSku();
  return {
    paths,
    fallback: false,
  };
}

export async function getStaticProps({ params }: { params: { sku: string } }) {
  const productData = await getProductData(params.sku);

  return {
    props: {
      productData,
    },
    revalidate: 60,
  };
}
export default ProductPage;
